// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/inventory.go
//
// Generated by this command:
//
//	mockgen -source pkg/repository/interfaces/inventory.go -destination pkg/repository/Repomock/inventory_mock.go -package Repomock
//

// Package Repomock is a generated GoMock package.
package Repomock

import (
	domain "HeadZone/pkg/domain"
	models "HeadZone/pkg/utils/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInventoryRepository is a mock of InventoryRepository interface.
type MockInventoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryRepositoryMockRecorder
}

// MockInventoryRepositoryMockRecorder is the mock recorder for MockInventoryRepository.
type MockInventoryRepositoryMockRecorder struct {
	mock *MockInventoryRepository
}

// NewMockInventoryRepository creates a new mock instance.
func NewMockInventoryRepository(ctrl *gomock.Controller) *MockInventoryRepository {
	mock := &MockInventoryRepository{ctrl: ctrl}
	mock.recorder = &MockInventoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryRepository) EXPECT() *MockInventoryRepositoryMockRecorder {
	return m.recorder
}

// AddInventory mocks base method.
func (m *MockInventoryRepository) AddInventory(inventory models.AddInventories) (models.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInventory", inventory)
	ret0, _ := ret[0].(models.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInventory indicates an expected call of AddInventory.
func (mr *MockInventoryRepositoryMockRecorder) AddInventory(inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventory", reflect.TypeOf((*MockInventoryRepository)(nil).AddInventory), inventory)
}

// CheckInventory mocks base method.
func (m *MockInventoryRepository) CheckInventory(pid int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInventory", pid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInventory indicates an expected call of CheckInventory.
func (mr *MockInventoryRepositoryMockRecorder) CheckInventory(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInventory", reflect.TypeOf((*MockInventoryRepository)(nil).CheckInventory), pid)
}

// CheckStock mocks base method.
func (m *MockInventoryRepository) CheckStock(inventory_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStock", inventory_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStock indicates an expected call of CheckStock.
func (mr *MockInventoryRepositoryMockRecorder) CheckStock(inventory_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStock", reflect.TypeOf((*MockInventoryRepository)(nil).CheckStock), inventory_id)
}

// DeleteInventory mocks base method.
func (m *MockInventoryRepository) DeleteInventory(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockInventoryRepositoryMockRecorder) DeleteInventory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockInventoryRepository)(nil).DeleteInventory), id)
}

// EditInventory mocks base method.
func (m *MockInventoryRepository) EditInventory(arg0 domain.Inventory, arg1 int) (domain.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInventory", arg0, arg1)
	ret0, _ := ret[0].(domain.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInventory indicates an expected call of EditInventory.
func (mr *MockInventoryRepositoryMockRecorder) EditInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInventory", reflect.TypeOf((*MockInventoryRepository)(nil).EditInventory), arg0, arg1)
}

// ExtractRating mocks base method.
func (m *MockInventoryRepository) ExtractRating(productID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractRating", productID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRating indicates an expected call of ExtractRating.
func (mr *MockInventoryRepositoryMockRecorder) ExtractRating(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRating", reflect.TypeOf((*MockInventoryRepository)(nil).ExtractRating), productID)
}

// FetchProductDetails mocks base method.
func (m *MockInventoryRepository) FetchProductDetails(productId uint) (models.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductDetails", productId)
	ret0, _ := ret[0].(models.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductDetails indicates an expected call of FetchProductDetails.
func (mr *MockInventoryRepositoryMockRecorder) FetchProductDetails(productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductDetails", reflect.TypeOf((*MockInventoryRepository)(nil).FetchProductDetails), productId)
}

// FilterByCategory mocks base method.
func (m *MockInventoryRepository) FilterByCategory(CategoryIdInt int) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByCategory", CategoryIdInt)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByCategory indicates an expected call of FilterByCategory.
func (mr *MockInventoryRepositoryMockRecorder) FilterByCategory(CategoryIdInt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByCategory", reflect.TypeOf((*MockInventoryRepository)(nil).FilterByCategory), CategoryIdInt)
}

// GetInventory mocks base method.
func (m *MockInventoryRepository) GetInventory(prefix string) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", prefix)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockInventoryRepositoryMockRecorder) GetInventory(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventoryRepository)(nil).GetInventory), prefix)
}

// ListProducts mocks base method.
func (m *MockInventoryRepository) ListProducts(arg0, arg1 int) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockInventoryRepositoryMockRecorder) ListProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockInventoryRepository)(nil).ListProducts), arg0, arg1)
}

// ProductRating mocks base method.
func (m *MockInventoryRepository) ProductRating(id, productID int, rating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductRating", id, productID, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductRating indicates an expected call of ProductRating.
func (mr *MockInventoryRepositoryMockRecorder) ProductRating(id, productID, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductRating", reflect.TypeOf((*MockInventoryRepository)(nil).ProductRating), id, productID, rating)
}

// ShowIndividualProducts mocks base method.
func (m *MockInventoryRepository) ShowIndividualProducts(id string) (models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndividualProducts", id)
	ret0, _ := ret[0].(models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndividualProducts indicates an expected call of ShowIndividualProducts.
func (mr *MockInventoryRepositoryMockRecorder) ShowIndividualProducts(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndividualProducts", reflect.TypeOf((*MockInventoryRepository)(nil).ShowIndividualProducts), id)
}

// UpdateInventory mocks base method.
func (m *MockInventoryRepository) UpdateInventory(pid, stock int) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", pid, stock)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryRepositoryMockRecorder) UpdateInventory(pid, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryRepository)(nil).UpdateInventory), pid, stock)
}
