// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/inventory.go
//
// Generated by this command:
//
//	mockgen -source pkg/usecase/interfaces/inventory.go -destination pkg/usecase/mock/inventory_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domain "HeadZone/pkg/domain"
	models "HeadZone/pkg/utils/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInventoryUseCase is a mock of InventoryUseCase interface.
type MockInventoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryUseCaseMockRecorder
}

// MockInventoryUseCaseMockRecorder is the mock recorder for MockInventoryUseCase.
type MockInventoryUseCaseMockRecorder struct {
	mock *MockInventoryUseCase
}

// NewMockInventoryUseCase creates a new mock instance.
func NewMockInventoryUseCase(ctrl *gomock.Controller) *MockInventoryUseCase {
	mock := &MockInventoryUseCase{ctrl: ctrl}
	mock.recorder = &MockInventoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryUseCase) EXPECT() *MockInventoryUseCaseMockRecorder {
	return m.recorder
}

// AddInventory mocks base method.
func (m *MockInventoryUseCase) AddInventory(inventory models.AddInventories) (models.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInventory", inventory)
	ret0, _ := ret[0].(models.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInventory indicates an expected call of AddInventory.
func (mr *MockInventoryUseCaseMockRecorder) AddInventory(inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).AddInventory), inventory)
}

// DeleteInventory mocks base method.
func (m *MockInventoryUseCase) DeleteInventory(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockInventoryUseCaseMockRecorder) DeleteInventory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).DeleteInventory), id)
}

// EditInventory mocks base method.
func (m *MockInventoryUseCase) EditInventory(arg0 domain.Inventory, arg1 int) (domain.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInventory", arg0, arg1)
	ret0, _ := ret[0].(domain.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInventory indicates an expected call of EditInventory.
func (mr *MockInventoryUseCaseMockRecorder) EditInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).EditInventory), arg0, arg1)
}

// FilterByCategory mocks base method.
func (m *MockInventoryUseCase) FilterByCategory(CategoryIdInt int) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByCategory", CategoryIdInt)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByCategory indicates an expected call of FilterByCategory.
func (mr *MockInventoryUseCaseMockRecorder) FilterByCategory(CategoryIdInt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByCategory", reflect.TypeOf((*MockInventoryUseCase)(nil).FilterByCategory), CategoryIdInt)
}

// ListProducts mocks base method.
func (m *MockInventoryUseCase) ListProducts(arg0, arg1 int) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockInventoryUseCaseMockRecorder) ListProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockInventoryUseCase)(nil).ListProducts), arg0, arg1)
}

// ProductRating mocks base method.
func (m *MockInventoryUseCase) ProductRating(id, productID int, rating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductRating", id, productID, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductRating indicates an expected call of ProductRating.
func (mr *MockInventoryUseCaseMockRecorder) ProductRating(id, productID, rating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductRating", reflect.TypeOf((*MockInventoryUseCase)(nil).ProductRating), id, productID, rating)
}

// SearchProductsOnPrefix mocks base method.
func (m *MockInventoryUseCase) SearchProductsOnPrefix(prefix string) ([]models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsOnPrefix", prefix)
	ret0, _ := ret[0].([]models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsOnPrefix indicates an expected call of SearchProductsOnPrefix.
func (mr *MockInventoryUseCaseMockRecorder) SearchProductsOnPrefix(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsOnPrefix", reflect.TypeOf((*MockInventoryUseCase)(nil).SearchProductsOnPrefix), prefix)
}

// ShowIndividualProducts mocks base method.
func (m *MockInventoryUseCase) ShowIndividualProducts(id string) (models.InventoryUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndividualProducts", id)
	ret0, _ := ret[0].(models.InventoryUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndividualProducts indicates an expected call of ShowIndividualProducts.
func (mr *MockInventoryUseCaseMockRecorder) ShowIndividualProducts(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndividualProducts", reflect.TypeOf((*MockInventoryUseCase)(nil).ShowIndividualProducts), id)
}

// UpdateInventory mocks base method.
func (m *MockInventoryUseCase) UpdateInventory(productID, stock int) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", productID, stock)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryUseCaseMockRecorder) UpdateInventory(productID, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).UpdateInventory), productID, stock)
}
