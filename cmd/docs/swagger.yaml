definitions:
  domain.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  domain.Inventory:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      category_id:
        type: integer
      color:
        type: string
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      stock:
        type: integer
    type: object
  domain.TokenAdmin:
    properties:
      accessToken:
        type: string
      admin:
        $ref: '#/definitions/models.AdminDetailsResponse'
    type: object
  models.AddAddress:
    properties:
      city:
        type: string
      house_name:
        type: string
      name:
        type: string
      phone:
        type: string
      pin:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - city
    - house_name
    - name
    - phone
    - pin
    - state
    - street
    type: object
  models.AddInventories:
    properties:
      category_id:
        type: integer
      color:
        type: string
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      stock:
        type: integer
    type: object
  models.Address:
    properties:
      city:
        type: string
      house_name:
        type: string
      id:
        type: integer
      name:
        type: string
      pin:
        type: string
      state:
        type: string
      street:
        type: string
      user_id:
        type: integer
    required:
    - city
    - house_name
    - name
    - pin
    - state
    - street
    type: object
  models.AdminDetailsResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    type: object
  models.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  models.ChangePassword:
    properties:
      old_password:
        type: string
      password:
        type: string
      re_password:
        type: string
    type: object
  models.CouponResponse:
    properties:
      coupon_name:
        type: string
      discount_rate:
        type: integer
      id:
        type: integer
      status:
        type: boolean
    type: object
  models.EditDetailsResponse:
    properties:
      email:
        type: string
      name:
        description: Id    int    `json:"id"`
        type: string
      phone:
        type: string
    type: object
  models.InventoryUserResponse:
    properties:
      category_id:
        type: integer
      color:
        type: string
      id:
        type: integer
      price:
        type: integer
      productname:
        type: string
      rating:
        type: number
    type: object
  models.NewPaymentMethod:
    properties:
      payment_method:
        type: string
    type: object
  models.Null:
    properties:
      _:
        type: string
    type: object
  models.OTPData:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  models.Order:
    properties:
      address_id:
        type: integer
      coupon_id:
        type: integer
      payment_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.PaymentMethod:
    properties:
      id:
        type: integer
      payment_name:
        type: string
    type: object
  models.SetNewName:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  models.TokenUsers:
    properties:
      token:
        type: string
      users:
        $ref: '#/definitions/models.UserDetailsResponse'
    type: object
  models.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - phone
    type: object
  models.UserDetailsResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    required:
    - phone
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.VerifyData:
    properties:
      code:
        type: string
      phone:
        type: string
    required:
    - code
    - phone
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        description: StatusCode int         `json:"status_code"`
        type: string
    type: object
info:
  contact:
    name: API Support
  description: HeadZone is an E-commerce platform to purchase and sell Headphones
  title: Go + Gin E-Commerce API
  version: 1.0.0
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Authenticate an admin user
      parameters:
      - description: Admin login details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Admin authenticated successfully
          schema:
            $ref: '#/definitions/domain.TokenAdmin'
        "400":
          description: Unable to authenticate user
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authenticate admin
      tags:
      - Admin
  /admin/category:
    delete:
      consumes:
      - application/json
      description: Deletes a category based on the provided ID
      parameters:
      - description: Category ID to delete
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a category by ID
      tags:
      - Admin Category Management
    get:
      consumes:
      - application/json
      description: Retrieves all available categories
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all categories
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get all categories
      tags:
      - Admin Category Management
    post:
      consumes:
      - application/json
      description: Add a new category to the system
      parameters:
      - description: Category object to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added category
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new category
      tags:
      - Admin Category Management
    put:
      consumes:
      - application/json
      description: Update an existing category name in the system
      parameters:
      - description: Current and New names in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SetNewName'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated category name
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Could not update the category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update a category name
      tags:
      - Admin Category Management
  /admin/coupon:
    get:
      consumes:
      - application/json
      description: Fetches all available coupons
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.CouponResponse'
        "400":
          description: Error retrieving coupons
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve all coupons
      tags:
      - Admin Coupon Management
    patch:
      consumes:
      - application/json
      description: Update an existing coupon's details such as name, status, and discount
        rate
      parameters:
      - description: Coupon ID to update
        in: query
        name: id
        required: true
        type: integer
      - description: Coupon details to update
        in: body
        name: CouponDetails
        required: true
        schema:
          $ref: '#/definitions/models.CouponResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated coupon
          schema:
            $ref: '#/definitions/models.CouponResponse'
        "400":
          description: Error updating coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update an existing coupon by ID
      tags:
      - Admin Coupon Management
    post:
      consumes:
      - application/json
      description: Adds a new coupon with provided details
      parameters:
      - description: Coupon details in JSON format
        in: body
        name: CouponDetails
        required: true
        schema:
          $ref: '#/definitions/models.CouponResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new coupon
      tags:
      - Admin Coupon Management
  /admin/customreport:
    get:
      consumes:
      - application/json
      description: Generates a sales report within the specified date range. Requires
        'start' and 'end' dates in the format 'DD-MM-YYYY'.
      parameters:
      - description: Start date (DD-MM-YYYY)
        in: query
        name: start
        required: true
        type: string
      - description: End date (DD-MM-YYYY)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Custom sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Generate custom sales report
      tags:
      - Admin Dashboard
  /admin/dashboard:
    get:
      description: Get details for the dashboard
      responses:
        "200":
          description: Successfully received the dashboard details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve dashboard details
      tags:
      - Admin Dashboard
  /admin/inventory:
    delete:
      consumes:
      - application/json
      description: Deletes an inventory item by its ID
      parameters:
      - description: Inventory ID to delete
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error deleting inventory
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete an inventory item
      tags:
      - Admin Inventory Management
    post:
      consumes:
      - application/json
      description: Adds new inventory details
      parameters:
      - description: Inventory object to be added
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/models.AddInventories'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.Null'
        "400":
          description: Error adding inventory
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add new inventory
      tags:
      - Admin Inventory Management
    put:
      consumes:
      - application/json
      description: Update an inventory item by ID
      parameters:
      - description: Inventory ID to update
        in: query
        name: inventory_id
        required: true
        type: integer
      - description: Inventory object to update
        in: body
        name: Inventory
        required: true
        schema:
          $ref: '#/definitions/domain.Inventory'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated inventory
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit an inventory item
      tags:
      - Admin Inventory Management
  /admin/inventory/stock:
    put:
      consumes:
      - application/json
      description: Updates the stock of an inventory item by its ID
      parameters:
      - description: Product ID
        in: body
        name: Productid
        required: true
        schema:
          type: integer
      - description: New Stock
        in: body
        name: Stock
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error updating inventory stock
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update inventory stock
      tags:
      - Admin Inventory Management
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieves paginated orders for admin view
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get admin orders
      tags:
      - Admin Order Management
  /admin/orders/status:
    get:
      consumes:
      - application/json
      description: Approves an order by its ID
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Approve an order
      tags:
      - Admin Order Management
  /admin/payment-method:
    delete:
      description: Delete a payment method by its ID
      parameters:
      - description: Payment method ID to delete
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully deleted the payment method
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a payment method
      tags:
      - Admin Payment Method
    get:
      description: Get a list of all available payment methods in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of payment methods
          schema:
            items:
              $ref: '#/definitions/models.PaymentMethod'
            type: array
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve available payment methods
      tags:
      - Admin Payment Method
    post:
      consumes:
      - application/json
      description: Add a new payment method to the system
      parameters:
      - description: New payment method details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NewPaymentMethod'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added Payment Method
          schema:
            type: string
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create a new payment method
      tags:
      - Admin Payment Method
  /admin/salesbydate:
    get:
      consumes:
      - application/json
      description: Get sales details based on the provided year, month, and day parameters.
        Generate reports in PDF or Excel format.
      parameters:
      - description: Year (YYYY)
        in: query
        name: year
        required: true
        type: integer
      - description: Month (1-12)
        in: query
        name: month
        required: true
        type: integer
      - description: Day (1-31)
        in: query
        name: day
        required: true
        type: integer
      - description: Specify 'pdf' or 'excel' to download the report in PDF or Excel
          format respectively
        in: query
        name: download
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully received the sales details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve sales details by date
      tags:
      - Admin Dashboard
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of users based on the provided page number
      parameters:
      - description: Page number for user retrieval
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the users
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Page number not in the right format or could not retrieve records
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve users
      tags:
      - Admin User Management
  /admin/users/block:
    post:
      consumes:
      - application/json
      description: Block a user based on their ID
      parameters:
      - description: User ID to block
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully blocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User could not be blocked
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block a user
      tags:
      - Admin User Management
  /admin/users/unblock:
    post:
      consumes:
      - application/json
      description: Unblock a user based on their ID
      parameters:
      - description: User ID to be unblocked
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unblocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User could not be unblocked
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock a user
      tags:
      - Admin User Management
  /user/cart:
    delete:
      consumes:
      - application/json
      description: Removes a specific product from the user's cart by cart ID and
        inventory ID
      parameters:
      - description: Cart ID
        in: query
        name: cart_id
        required: true
        type: integer
      - description: Inventory ID
        in: query
        name: inventory_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product removed successfully from the cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to remove the product from the cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Remove Product from Cart
      tags:
      - User Cart Management
    get:
      consumes:
      - application/json
      description: Retrieves the products in the user's cart
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User's cart retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve the cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get User Cart
      tags:
      - User Cart Management
    post:
      consumes:
      - application/json
      description: Adds a selected product to the user's cart based on provided parameters
      parameters:
      - description: Inventory ID of the product to be added
        in: query
        name: inventory_id
        required: true
        type: integer
      - description: Quantity of the product to be added
        in: query
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to cart
          schema:
            type: object
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - ApiKeyAuth: []
      summary: Add a product to the cart
      tags:
      - User Cart Management
    put:
      consumes:
      - application/json
      description: Updates the quantity of a specific product in the user's cart by
        ID and inventory ID
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: integer
      - description: Inventory ID
        in: query
        name: inventory
        required: true
        type: integer
      - description: New Quantity
        in: query
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Quantity updated successfully in the cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to update the quantity in the cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update Product Quantity in Cart
      tags:
      - User Cart Management
  /user/change-password:
    patch:
      consumes:
      - application/json
      description: Allows a user to update their password
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      - description: Change Password Request
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or password change failure
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Change Password
      tags:
      - User Profile Management
  /user/check-out:
    get:
      consumes:
      - application/json
      description: Retrieves the products in the user's cart for checkout
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all records
          schema:
            type: object
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get products for checkout
      tags:
      - User Cart Management
    post:
      consumes:
      - application/json
      description: Allows a user to create an order from items in their cart
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create an order from cart items
      tags:
      - User Order Management
  /user/check-out/print:
    get:
      consumes:
      - application/json
      description: Generates and provides a PDF invoice for a specific order ID
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      responses:
        "200":
          description: Invoice PDF file
          schema:
            type: string
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.Response'
        "502":
          description: Bad Gateway error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Print an invoice
      tags:
      - User Invoice
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with provided credentials
      parameters:
      - description: User login details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: User details logged in successfully
          schema:
            $ref: '#/definitions/models.UserDetails'
        "400":
          description: Invalid request or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid credentials'
          schema:
            $ref: '#/definitions/models.UserDetails'
      summary: Log in a user
      tags:
      - User Profile Management
  /user/otplogin:
    post:
      consumes:
      - application/json
      description: Sends an OTP (One-Time Password) to the provided phone number
      parameters:
      - description: Phone number to receive OTP
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/models.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or phone number
          schema:
            $ref: '#/definitions/response.Response'
        "502":
          description: Bad Gateway error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - User OTP
  /user/products:
    get:
      consumes:
      - application/json
      description: Retrieves a list of products with pagination support
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of products per page (default: 5)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.InventoryUserResponse'
            type: array
        "400":
          description: Invalid request or failed to fetch products
          schema:
            $ref: '#/definitions/response.Response'
      summary: List products with pagination
      tags:
      - User Product
  /user/products/filter:
    get:
      consumes:
      - application/json
      description: Filters products based on the provided category ID
      parameters:
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Filter products by category ID
      tags:
      - User Category
  /user/products/rating:
    post:
      consumes:
      - application/json
      description: Allows a user to rate a specific product
      parameters:
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      - description: Rating (1-5)
        in: query
        name: rating
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Rate a product
      tags:
      - User Product
  /user/products/search:
    put:
      consumes:
      - application/json
      description: Search for a product
      parameters:
      - description: Product ID
        in: body
        name: Productid
        required: true
        schema:
          type: integer
      - description: New Stock
        in: body
        name: Stock
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error updating inventory stock
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update inventory stock
      tags:
      - User Product
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/models.UserDetailsResponse'
        "400":
          description: Failed to retrieve user details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get user details
      tags:
      - User Profile Management
    post:
      consumes:
      - application/json
      description: Adds a new address for the user
      parameters:
      - description: Address details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddAddress'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added address
          schema:
            type: string
        "400":
          description: Invalid request or address addition failed
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new address
      tags:
      - User Profile Management
    put:
      consumes:
      - application/json
      description: Edit user details based on the provided information
      parameters:
      - description: User details to be updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EditDetailsResponse'
      produces:
      - application/json
      responses:
        "201":
          description: Updated user details
          schema:
            $ref: '#/definitions/models.EditDetailsResponse'
        "400":
          description: Invalid request or error updating values
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit user details
      tags:
      - User Profile Management
  /user/profile/address:
    get:
      consumes:
      - application/json
      description: Get addresses associated with a user ID
      produces:
      - application/json
      responses:
        "200":
          description: Addresses retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Address'
            type: array
        "400":
          description: Could not retrieve records or invalid request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve addresses for a user
      tags:
      - User Profile Management
  /user/profile/orders:
    delete:
      consumes:
      - application/json
      description: Cancels an order based on the provided order ID
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or missing ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Cancel an order
      tags:
      - User Order Management
    get:
      consumes:
      - application/json
      description: Retrieves orders based on the provided order ID
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or missing ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve orders
      tags:
      - User Order Management
  /user/profile/orders/all:
    get:
      consumes:
      - application/json
      description: Retrieves paginated orders for a specific user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or missing ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get all orders
      tags:
      - Admin Order Management
  /user/profile/orders/return:
    put:
      consumes:
      - application/json
      description: Returns an order by its ID
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Return an order
      tags:
      - User Order Management
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "201":
          description: User signed up successfully
          schema:
            $ref: '#/definitions/models.UserDetails'
        "400":
          description: Invalid request or constraints not satisfied
          schema:
            $ref: '#/definitions/models.TokenUsers'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.TokenUsers'
      summary: Register a new user
      tags:
      - User Profile Management
  /user/verifyotp:
    post:
      consumes:
      - application/json
      description: Verifies the provided OTP (One-Time Password)
      parameters:
      - description: Data to verify OTP
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/models.VerifyData'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or OTP
          schema:
            $ref: '#/definitions/response.Response'
        "502":
          description: Bad Gateway error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - User OTP
  /user/wallet:
    get:
      consumes:
      - application/json
      description: Retrieves the wallet details for a specific user by ID
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wallet details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve wallet details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: View User's Wallet
      tags:
      - User Wallet Management
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
